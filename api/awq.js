export default async function handler(req, res) {
  if (req.method !== "POST") {
    return res.status(405).json({ ok: false, error: "Method not allowed" });
  }

  const { initData, bags, comment, profile } = req.body || {};

  if (!initData || !bags) {
    return res.status(400).json({ ok: false, error: "bad args" });
  }

  // –î–æ—Å—Ç–∞—ë–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ profile (—Ç—ã –ø–µ—Ä–µ–¥–∞—ë—à—å –∏—Ö –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è)
  const name = profile?.first_name || profile?.name || "‚Äî";
  const username = profile?.username ? `@${profile.username}` : "‚Äî";
  const phone = profile?.phone || "‚Äî";

  const addressParts = [];
  if (profile?.street) addressParts.push(profile.street);
  if (profile?.house) addressParts.push(`–¥. ${profile.house}`);
  if (profile?.flat) addressParts.push(`–∫–≤. ${profile.flat}`);
  if (profile?.entrance) addressParts.push(`–ø–æ–¥—ä–µ–∑–¥ ${profile.entrance}`);
  if (profile?.floor) addressParts.push(`—ç—Ç–∞–∂ ${profile.floor}`);
  const address = addressParts.length ? addressParts.join(", ") : "‚Äî";

  // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∑–∞—è–≤–∫–∏
  const text = `üìù –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞!
üë§ –ò–º—è: ${name}
üîó Username: ${username}
üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${phone}
üè† –ê–¥—Ä–µ—Å: ${address}

–ö–æ–ª-–≤–æ —Å—É–º–æ–∫: ${bags}
–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${comment || "‚Äî"}

InitData: ${initData}
`;

  try {
    const resp = await fetch(
      `https://api.telegram.org/bot${process.env.BOT_TOKEN}/sendMessage`,
      {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          chat_id: process.env.ADMIN_ID,
          text,
        }),
      }
    );

    const data = await resp.json();
    console.log("–û—Ç–≤–µ—Ç Telegram:", data);

    if (!data.ok) {
      return res.status(500).json({ ok: false, error: data.description });
    }

    return res.status(200).json({ ok: true });
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞:", err);
    return res.status(500).json({ ok: false, error: "server error" });
  }
}

