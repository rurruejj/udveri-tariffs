// api/awq.js
import fetch from "node-fetch";

export default async function handler(req, res) {
  if (req.method !== "POST") {
    return res.status(405).json({ ok: false, error: "Method not allowed" });
  }

  try {
    const { initData, bags, comment, first_name, street, house, flat, entrance, floor, phone } = req.body;

    if (!initData) {
      return res.status(400).json({ ok: false, error: "initData required" });
    }

    // –†–∞–∑–±–∏—Ä–∞–µ–º initData (Telegram WebApp –¥–∞–Ω–Ω—ã–µ)
    const urlParams = new URLSearchParams(initData);
    const userParam = urlParams.get("user");
    let user = {};
    if (userParam) {
      try {
        user = JSON.parse(decodeURIComponent(userParam));
      } catch (e) {
        console.error("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ user:", e);
      }
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∑–∞—è–≤–∫–∏
    const text =
`üìù –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞!
üë§ –ò–º—è: ${first_name || user.first_name || "‚Äî"}
üîó Username: @${user.username || "‚Äî"}
üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${phone || "‚Äî"}
üìç –ê–¥—Ä–µ—Å: ${[street, house ? "–¥. " + house : "", flat ? "–∫–≤. " + flat : "", entrance ? "–ø–æ–¥—ä–µ–∑–¥ " + entrance : "", floor ? "—ç—Ç–∞–∂ " + floor : ""].filter(Boolean).join(", ") || "‚Äî"}

üõç –ö–æ–ª-–≤–æ —Å—É–º–æ–∫: ${bags || "‚Äî"}
üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${comment || "‚Äî"}`;

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—É
    const BOT_TOKEN = process.env.BOT_TOKEN || "–¢–û–ö–ï–ù_–¢–í–û–ï–ì–û_–ë–û–¢–ê";
    const ADMIN_ID = process.env.ADMIN_ID || "–¢–í–û–ô_CHAT_ID";

    const apiUrl = `https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`;

    await fetch(apiUrl, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        chat_id: ADMIN_ID,
        text,
        parse_mode: "HTML"
      })
    });

    return res.json({ ok: true });
  } catch (e) {
    console.error("awq error:", e);
    return res.status(500).json({ ok: false, error: "server error" });
  }
}

